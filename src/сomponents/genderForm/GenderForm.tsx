import { useFormik } from "formik";
import { useState } from "react";
import * as Yup from 'yup';
import styles from './genderForm.module.css';

// * —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ input
interface IFormData {
  name: string;
}

// * —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
interface IGenderData {
  count: number,
  name: string,
  gender: string,
  probability: number;
}

const schema = Yup.object().shape({
  name: Yup
    .string()
    .typeError('–í–∞—à–µ –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤')
    .required('–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é')
    .min(1, '–í–∞—à–µ –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞')
    .max(20, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–º—è üò≥')
    .matches(/^[A-Za-z\s]+$/, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã")
    .matches(/^[A-Z]/, "–ò–º—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã")
});

export default function GenderForm() {

  // * –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  const [genderData, setGenderData] = useState<IGenderData>({
    count: 0,
    name: '',
    gender: '',
    probability: 0
  });

  // * —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const fetchGender = async (name: string) => {
    const res = await fetch(`https://api.genderize.io/?name=${name}`);
    const data = await res.json();
    console.log(data);
    setGenderData(data);
  };

  // * –æ–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–æ—Ä–º—ã
  const formik = useFormik({
    // –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã
    initialValues: {
      name: ""
    } as IFormData,
    // –æ—Ç–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é input
    validateOnChange: false,
    // –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validationSchema: schema,
    // –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–ª—É—á–∏—Ç—Å—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–æ–º submit –≤ —Ñ–æ—Ä–º–µ
    onSubmit: (values: IFormData, { resetForm }) => {
      resetForm();
      fetchGender(values.name);
    }
  });



  return (
    <div className="lesson-container">
      <h5>Know your gender ‚ú®</h5>

      <form className={styles.genderForm} onSubmit={formik.handleSubmit}>
        <label className={styles.error}>{formik.errors.name}</label>
        <input placeholder="type your name" onChange={formik.handleChange} value={formik.values.name} name="name" type="text" />
        <button type="submit">send request</button>
      </form>

      {genderData.name && (
        <p>{genderData.name} is {genderData.gender === 'male' ? 'üíÅ‚Äç‚ôÇÔ∏è' : 'üíÅ‚Äç‚ôÄÔ∏è'} {genderData.probability * 100}%</p>
      )}
    </div>
  );
}

